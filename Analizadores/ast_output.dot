digraph G {
    node [style=filled, fillcolor=deepskyblue, shape=box, fontname=Arial, color=black];
    edge [color=gray50];
node0 [label="Program"];
node1 [label="FuncDeclStmt"];
node0 -> node1;
node2 [label="type_ = int"];
node1 -> node2;
node3 [label="name = ciclo"];
node1 -> node3;
node4 [label="params = None"];
node1 -> node4;
node5 [label="CompoundStmt"];
node1 -> node5;
node6 [label="VarDeclStmt"];
node5 -> node6;
node7 [label="type_ = int"];
node6 -> node7;
node8 [label="name = x"];
node6 -> node8;
node9 [label="expr = None"];
node6 -> node9;
node10 [label="ExprStmt"];
node5 -> node10;
node11 [label="AssignExpr"];
node10 -> node11;
node12 [label="op = ="];
node11 -> node12;
node13 [label="name = x"];
node11 -> node13;
node14 [label="LiteralExpr"];
node11 -> node14;
node15 [label="value = 4"];
node14 -> node15;
node16 [label="VarDeclStmt"];
node5 -> node16;
node17 [label="type_ = bool"];
node16 -> node17;
node18 [label="name = y"];
node16 -> node18;
node19 [label="LiteralExpr"];
node16 -> node19;
node20 [label="value = False"];
node19 -> node20;
node21 [label="WhileStmt"];
node5 -> node21;
node22 [label="BinaryOpExpr"];
node21 -> node22;
node23 [label="op = <"];
node22 -> node23;
node24 [label="VarExpr"];
node22 -> node24;
node25 [label="name = x"];
node24 -> node25;
node26 [label="LiteralExpr"];
node22 -> node26;
node27 [label="value = 10"];
node26 -> node27;
node28 [label="CompoundStmt"];
node21 -> node28;
node29 [label="ReturnStmt"];
node28 -> node29;
node30 [label="BinaryOpExpr"];
node29 -> node30;
node31 [label="op = *"];
node30 -> node31;
node32 [label="LiteralExpr"];
node30 -> node32;
node33 [label="value = 2"];
node32 -> node33;
node34 [label="VarExpr"];
node30 -> node34;
node35 [label="name = x"];
node34 -> node35;
node36 [label="ClassDeclStmt"];
node0 -> node36;
node37 [label="name = Persona"];
node36 -> node37;
node38 [label="VarDeclStmt"];
node36 -> node38;
node39 [label="type_ = int"];
node38 -> node39;
node40 [label="name = x"];
node38 -> node40;
node41 [label="expr = None"];
node38 -> node41;
node42 [label="FuncDeclStmt"];
node36 -> node42;
node43 [label="type_ = void"];
node42 -> node43;
node44 [label="name = hola"];
node42 -> node44;
node45 [label="params = ('int', 'x', ['int'], ['y'])"];
node42 -> node45;
node46 [label="CompoundStmt"];
node42 -> node46;
node47 [label="ReturnStmt"];
node46 -> node47;
node48 [label="BinaryOpExpr"];
node47 -> node48;
node49 [label="op = +"];
node48 -> node49;
node50 [label="VarExpr"];
node48 -> node50;
node51 [label="name = x"];
node50 -> node51;
node52 [label="VarExpr"];
node48 -> node52;
node53 [label="name = y"];
node52 -> node53;
node54 [label="FuncDeclStmt"];
node0 -> node54;
node55 [label="type_ = int"];
node54 -> node55;
node56 [label="name = main"];
node54 -> node56;
node57 [label="params = None"];
node54 -> node57;
node58 [label="CompoundStmt"];
node54 -> node58;
node59 [label="ReturnStmt"];
node58 -> node59;
node60 [label="CallExpr"];
node59 -> node60;
node61 [label="VarExpr"];
node60 -> node61;
node62 [label="name = ciclo"];
node61 -> node62;
node63 [label="args = None"];
node60 -> node63;
}
